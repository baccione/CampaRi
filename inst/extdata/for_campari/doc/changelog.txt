T 20 Sep 2005 (Hoang)
---------------------
Added the ability to specify the initial structure when you specify the sequence input, as in the Tinker 'protein' program.  To use, simply specify the phi, psi, omega, and chi angles, in that order, in the sequence input on each line after the amino acid name.  Any values not specified will continue to be set to default values.  Behavior is meant to be the same as in the Tinker 'protein' program.

M 19 Sep 2005 (Hoang)
---------------------
Added a simple segment density 'calculator' (turned off by default).  The keyword FMCSC_SHAPECALC sets the frequency of this calcuation.  The output file is 'SHAPE.dat'.  The routine which does the work is in 'densityshape.f' (new file).  It merely translates and rotates the molecule to the inertial reference frame, and prints out the coordinates of the alpha carbons.  

Note that this calculation actually changes the orientation of the molecule, so this calculation should not be used when the rigid body coordinates of the chain are important (i.e. in a multiple-chain simulation).  

T 13 Sep 2005 (Hoang)
---------------------
Added two keywords, FMCSC_WRITE_RGPC and FMCSC_INST_PERS.  These allow for writing out of asphericity and persistence length data as instantaneous values.  The following description is also in the KEYWORDS file.
WRITE_RGPC
  The presence of this keyword causes the (square) of the eigenvalues of the
  gyration tensor and a measure of asphericity (delta* of Steinhauser JCP 122,
  094901 (2005)) to be output as instantaneous values in a file 'INERTIAL.dat'
INST_PERS
  This keyword causes instantaneous values of cosines to be output to
  'PERSISTENCE.dat' instead of just an average at the end of the simulation.

T 23 Aug 2005
-------------
Implemented routines to calculate distribution of interior void space.  The question is:  If a sphere of radius 'a' is placed randomly at a distance 'r' from the center of mass, will it bump into a part of the chain?  

New output file:  HOLES.dat -- the first two lines contain the range of distances 'r', and sphere sizes 'a'.  Each subsequent line contains the following:  each line is divided into groups.  Each group represents a value for 'a', in ascending value.  Within a group, you have ascending values of 'r'.  The code is binary:  1 means the test sphere is empty.  0 means that the sphere contains some part of the chain.  

new file: contains the actual subroutines for calculation  
  holes.f
modified files:  modified to control usage of holes calculation
  mcstat.f, initial.f, mcsums.i, chainsaw.f, parsekey.f, nikola.i, makeio.f   
new keyword:  FMCSC_HOLESCALC to control interval of calculation

W 06 Jul 2005
-------------
Added a routine to calculate scattering profiles, 'scatter.f'.  It is controlled with the keyword SCATTERFREQ.

F 13 May 2005 (Hoang)
---------------------
added a new subroutine: ramadipept(dipgrid) -- for dipeptides, this calculates the phi,psi gas-phase free energy surface by stepping through torsions (phi,psi,chi) with a stepsize of 'dipgrid'.  The output files are Phi.dat, Psi.dat, and En.dat, suitable for contour plotting in Matlab.

usage:  call ramadipept(dipgrid) during your simulation (of dipeptides, only)

new files: ramadipept.f

T 05 April 2005 (Hoang)
-----------------------
Pruning energy interactions:  When making a single-residue move, some interactions do not change.  Rohit provided a scheme and code to calculate only those interactions which change.  I integrated this code into the current source, specifically in the chainsaw Monte carlo program, and made a change to account for proline residues.  Some benchmarks were also run comparing this strategy (Using elscp) with the previous one (using energy())

For 10000 moves: (no inherent structure mapping)

      Using elscp:     using energy():
      ------------     ---------------

A10:    12 sec            12 sec
A50:   161 sec           233 sec
A100:  710 sec          1130 sec

new files:
source/chain.i
source/elscp.f
source/lever.f
source/linters.i

modified files:
source/Makefile
source/chainsaw.f
source/escp.f -- fixed typo in comment
source/mcmove.f 
source/nikola.i -- added variable to save partial energy before a trial move
source/setconf.f
source/sizes.i -- increases array sizes for longer sequences


M 30 March 2005 (Hoang)
-----------------------
This update implements the scheme whereby a random number of MC moves are performed on one residue/one hypercube.  The idea is that by sampling from within one hypercube, the acceptance ratio increases (hopefully).

the code changes are in hypercube-specific files:
     readhc.f    
     hcboxes.i   
     hcmove.f    

and also in:
     mcmove.f    
     setconf.f   

Use:  In readhc.f, there is a parameter 'moves_in_hc'.  This controls the number of times to sample repeatedly within one hypercube.  I.e. setting 'moves_in_hc = 0' should be equivalent to the previous code.  The higher 'moves_in_hc' is set, the higher the acceptance rate (in general), but the snapshots will be more correlated.  The current setting 'moves_in_hc = 0' seems to be a reasonable choice.  


U 27 March 2005 (Hoang)
-----------------------
Bugfixes for the generation and usage of hypercubes are the major changes.

other changes:
data/hypercubes -- directory is updated with new hypercube data.
chanisaw.f -- put in line to write out number of interactions
setconf.f -- now all amino acids can use hypercubes


T 15 March 2005
---------------

This update implements 'hypercubes' to improve single-residue moves.

new directory:  
data/ -- contains precomputed data about dipeptides.
data/grids -- phi/psi grids
data/hypercubes -- hypercubes (lacks cys, lys, arg, pro)

<<< code changes >>>

--global variables in *.i--
mcsums.i -- added line 'save /mcsums/' as a precautionary measure
hcboxes.i -- new file for hypercubes
cuboid.i -- new file for hypercubes
sizes.i  -- addition of new paramter, maxihs=500

---------------------------
ephi1.f -- bugfix:  changed to use bet(ff) directly for the phi-value, instead of changing the phi( ) array.  This was causing problems with fyc dumpout after inherent structure mapping.

readgrid.f -- changed location of grid points to be more centrally located, in the data/ directory

chainsaw.f -- added code to control usage of hypercubes

setconf.f -- many changes (for usage of hypercubes) and bugfixes.  Of note is the check to use hypercubes, around line 50.  This contains the list of amino acids for which to use hypercubes (when use_hc is set .true.).  This list should not contain proline (because proline uses a special sidechain picking algorithm).  Also, those aa's without chi-angles (G,A) will not benefit from hypercubes. Currently, P,C,K,R hypercubes are not implemented.

mcmove.f -- bugfix to take care of the case where y2 or f2 is zero (same bugfix in setconf.f)

dipeptide.f -- new file:  program to generate hypercubes

hcoverlap.f -- new file:  subroutine to find overlapping hypercubes and assigns them to the same group

hyprcube.f -- new file:  updates the list of hypercubes

readhc.f -- new file:  read in the precomputed hypercubes for use in simulation

hcmove.f -- new file:  uses precomputed hypercubes to generate a monte carlo move

swmap.f	-- deleted calculations/dumpouts of rg,rete1,rete2,rt for inherent structures

minrot.f -- deleted calculations/dumpouts of rg,rete1,rete2,rt, and some bugfixes.  Changed to steepest descent mapping.



Usage of programs:

dipeptide:  program to generate hypercubes from dipeptides.  Run the program, inputting the dipeptide you want.  You need to run this program 20 times for all the amino acids.  This program generates three files:  hclist.dat (list of hypercubes)  minima.dat (minima)  shc.dat (the hypercubes merged together, currently unused).  'hclist.dat' is in the format to be used by 'chainsaw'.  Copy this file to the data/ directory and rename it ???_hc.dat, replacing ??? with the 3-letter amino acid code.  You normally don't need to run this program.  Currently, hypercubes are not implemented for Proline, and there is no plan to.  All others should be ready.  
options:  cutoff:  currently, the cutoff is at 4kcal/mol above global minimum (~6.75 RT), sufficient to capture virtually all the population for all dipeptides (<a href="en_spectra.eps">dipeptide energy spectra</a>)
hardsphere:  set to true to enable uniform sampling of allowed space (energy below the cutoff).  This (non-boltzmann) sampling allows enhanced sampling of higher energy regions, and faster determination of hypercube boundaries.  You should of course sample sufficiently to cover the entire allowed space.  

chainsaw:  old program, but now uses hypercubes, when the flag 'use_hc' is .true.  Otherwise, grids are used.  Grids are still used for P.  Usage of hypercubes or not should not affect results, but using hypercubes should result in better (~2-3X) acceptance ratios.
