% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_campari.R
\name{run_campari}
\alias{run_campari}
\title{Frontend for the original CAMPARI library}
\usage{
run_campari(trj = NULL, base_name = "base_name", data_file = NULL,
  nsnaps = NULL, seq_in = NULL, multi_threading = FALSE, mpi = FALSE,
  print_status = TRUE, run_in_background = FALSE, key_file_input = NULL,
  return_log = FALSE, silent = FALSE, campari_exe = NULL, ...)
}
\arguments{
\item{trj}{Trajectory to be analysed by campari. It must be in the format (snapshots per variables). It will be written as an .tsv in the current working directory.}

\item{base_name}{This string can be used for the input/output files, such as (\code{base_name.key}, \code{base_name.in}) and others.}

\item{data_file}{Input file (e.g. \code{trajectory.dcd}) location. This or \code{trj} must be set.}

\item{nsnaps}{Number of snapshots in the trajectory file. If the data_file format is not ASCII this variable must be set to the number of snapshots in the trajectory.}

\item{seq_in}{This input file specifies the sequence of the system to be simulated or analyzed. Every residue (the base organizational unit) occupies one line and uses a base three-letter representation.
This file is needed only in case of a simulation run or a non-ncminer(also ascii then) run.}

\item{multi_threading}{Default to \code{FALSE}. It will run campari_threads with openmp directives if installed.}

\item{mpi}{Default to \code{FALSE}. It will run campari_mpi with installed mpi-compiler. Please consider also campari_threads_mpi (also multi_threading=TRUE).}

\item{print_status}{Default to \code{TRUE}. It will print CAMPARI output on the R console or not otherwise.}

\item{run_in_background}{Default to \code{FALSE}. It will run CAMPARI in background. This option will disable print_status automatically.}

\item{key_file_input}{If you provide an already formatted keyfile to this argument, every variable defined in the provided keyfile will be overriden by the ones in this function and CAMPARI will 
be run after the generation of a new keyfile. Please note that in the case of multivariable keywords the algorithm will keep only the first value. Consider using \code{\link{keywords_from_keyfile}} function.}

\item{return_log}{Default to \code{FALSE}. It will return CAMPARI log as a string (also).}

\item{silent}{Defaults to \code{FALSE}. It will silent all outputs (not the warnings).}

\item{campari_exe}{If the automatic search fails it is possible to insert manually the location of the campari executable.}

\item{...}{Analysis variables (similarly to \code{\link{mst_from_trj}}). You can check all of these in the original documentation (\url{http://campari.sourceforge.net/documentation.html}).}
}
\description{
\code{run_campari} will call the original campari software, specified by its specific system-wide commands (e.g. campari, campari_threads).
     It is possible to use this function following the instructions in \url{http://campari.sourceforge.net/tutorial11.html}.
     For that purpose the keyfile is generated with a standard file name (\code{keyfile.key}) and overwritten automatically in the workind directory.
     Please consider that this function (therefore the CAMPARI library) will generate all the files in the working directory.
     As policy, the standard arguments of this functions will be overwritten in the specific FMSCS_* if they are supplied (e.g. data_file always
     overrides FMCSC_*FILE).
}
\details{
For details, please refer to the main documentation of the original campari software \url{http://campari.sourceforge.net/documentation.html}.
}
\examples{
\dontrun{
 run_campari(...)
}

}
\seealso{
\code{\link{mst_from_trj}}, \code{\link{gen_progindex}}, \code{\link{gen_annotation}}.
}
